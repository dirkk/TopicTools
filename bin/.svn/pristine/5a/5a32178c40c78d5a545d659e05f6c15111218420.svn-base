(:~ 
 : _request_setters.mod.xq - setter functions setting parameter values
 :
 : Supported parameter item types:
 :
 : xs:boolean 
 : ...
 :
 : @version 20140412-1 first version 
 : ===================================================================================
 :)

module namespace m="http://www.ttools.org/xquery-functions";

import module namespace i="http://www.ttools.org/xquery-functions" at
   "_constants.mod.xq";   

(:~
 : Sets a parameter. If a request is supplied, the function
 : creates a copy extended by the desired parameter; otherwise,
 : the function creates a new request element.
 : 
 : @param request the request element
 : @return the operation name
 :)
declare function m:setParam($request as element()?, 
                            $name as xs:string, 
                            $value as xs:anyAtomicType*,
                            $type as xs:string)
      as item()* {

    if (not(m:itemsCastable($value, $type))) then
        error(QName($i:URI_ERROR, 'INVALID_ARG'), concat('Invalid arguments supplied ',
        'to ''setParam'' - item type: ', $type, '; items=', string-join($value, '; '))) else
    
    let $paramItem :=
        element {$name} {
            attribute itemType {$type},
            if (count($value) eq 1) then $value else
                for $item in $value return <item>{$item}</item>
            }                
    return
        if ($request) then
            element {node-name($request)} {
                $request/@*,
                $request/node(),
                $paramItem
            }
        else <_request>{$paramItem}</_request>            
};

(:~
 : Checks if all items of an item sequence are castable to a given type.
 :
 : @param items the items to be checked
 : $type the type against which to check
 : @return true if all items are castable to $type
 :)
declare function m:itemsCastable($items as item()*, $type as xs:string)
        as xs:boolean {
    every $item in $items satisfies        
        if ($type eq 'xs:boolean') then $item castable as xs:boolean       
        else if ($type eq 'xs:decimal') then $item castable as xs:decimal        
        else if ($type eq 'xs:float') then $item castable as xs:float        
        else if ($type eq 'xs:double') then $item castable as xs:double      
        else if ($type eq 'xs:NCName') then $item castable as xs:NCName
        else if ($type eq 'xs:int') then $item castable as xs:int        
        else if ($type eq 'xs:integer') then $item castable as xs:integer        
        else if ($type eq 'xs:positiveInteger') then $item castable as xs:positiveInteger        
        else if ($type eq 'xs:nonNegativeInteger') then $item castable as xs:nonNegativeInteger
        else if ($type eq 'xs:negativeInteger') then $item castable as xs:negativeInteger
        else if ($type eq 'xs:nonPositive') then $item castable as xs:nonPositiveInteger        
        else if ($type eq 'string') then true()        
        else if ($type eq 'directory') then true()        
        else
            error(QName($i:URI_ERROR, 'NOT_YET_IMPL'), concat('Not yet implemented - setting parameter of type: ',
            $type))
};        
