(:
 : -------------------------------------------------------------------------
 :
 : items.mod.xq - Document me!
 :
 : -------------------------------------------------------------------------
 :)

(:~@type
    <type name="dateOffset" itemType="xs:date" func="parseItem_dateOffset"/>   
:)    

(:~@types
   <types>  
      <type name="integerRanges" itemType="xs:integer" func="parseItem_integerRanges"/>     
      <type name="travelScenario" itemType="element(travelScenario)" func="parseItem_travelScenario"/>     
   </types>
:)    

(:~@facets
   <facets>
      <facet name="maxTodayPlus" func="facet_maxTodayPlus" types="xs:date element(foo)" typeClasses="numeric time"/>   
      <facet name="minTodayPlus" func="facet_minTodayPlus" types="xs:date document-node(bar)" typeClasses="file time"/>
   </facets>
:)    

(:~@operations
   <operations>
      <operation name="names" type="node()" func="names">     
         <param name="doc" type="docURI*" sep="WS" pgroup="input"/>        
         <param name="dcat" type="docCAT{0,2}" sep="WS" pgroup="input"/>        
         <pgroup name="input" minOccurs="1"/>        
      </operation> 
      <operation name="paths" type="node()" func="paths">     
         <param name="doc" type="docURI*" sep="WS" pgroup="input"/>          
         <param name="dcat" type="docCAT*" sep="WS" pgroup="input"/>
         <pgroup name="input" minOccurs="1"/>         
      </operation> 
      <operation name="values" type="node()" func="values">     
         <param name="doc" type="docURI*" sep="WS" pgroup="input"/>          
         <param name="dcat" type="docCAT*" sep="WS" pgroup="input"/>
         <pgroup name="input" minOccurs="1"/>         
      </operation>
    </operations>  
:)  

(:~@operation
      <operation name="typeDemo" type="node()" func="typeDemo">     
         <param name="start" type="dateOffset" sep="WS"/>      
         <param name="numbers" type="integerRanges+" sep=";"/>
         <param name="ts" type="travelScenario+" sep=";"/>         
         <param name="date" type="xs:date" fct_maxTodayPlus="7" fct_minTodayPlus="-7" sep=";"/>
         <param name="decimal" type="xs:decimal?" sep=";"/>
         <param name="facet" type="xs:string?" fct_pattern="a.*" sep=";"/>
         <param name="normalizedString" type="xs:normalizedString?"/>         
         <param name="dayTimeDuration" type="xs:dayTimeDuration?"/>         
         <param name="token" type="xs:token?"/>         
         <param name="positiveInteger" type="xs:positiveInteger?" fct_min="100"/>         
         <param name="nameFilterMap" type="nameFilterMap?"/>         
         <param name="nameFilterMap2" type="nameFilterMap(xs:integer)?"/>    
      </operation>
:)

module namespace f="http://www.ttools.org/xclear/xquery-functions";
import module namespace tt="http://www.ttools.org/xquery-functions" at 
    "_request.mod.xq",
    "_reportAssistent.mod.xq",
    "_nameFilter.mod.xq";
    
declare namespace z="http://www.ttools.org/xclear/structure";
declare namespace ztt="http://www.ttools.org/structure";

(:~
 : Document me!
 :
 : @param request the operation request
 : @return a report describing ...
 :) 
declare function f:names($request as element())
        as element() {
    let $docs := tt:getParams($request, 'doc docs dcat')    
    return
        if (1 eq 2 - 1) then
            tt:wrapErrors((
                tt:createError('TEST_CODE', 'Test message', <err foo="bar"/>),
                tt:createError('TEST_CODE2', 'Test message2', <err foo="bar"/>)
            ))            
        else
        <z:names countDocs="{count($docs)}">{
           ()
        }</z:names>
};        
 
(:~
 : Document me!
 :
 : @param request the operation request
 : @return a report describing ...
 :) 
declare function f:paths($request as element())
        as element() {
    let $docs := tt:getParams($request, 'doc docs dcat')    
    return
        <z:paths countDocs="{count($docs)}">{
           ()
        }</z:paths>
};        
 
(:~
 : Document me!
 :
 : @param request the operation request
 : @return a report describing ...
 :) 
declare function f:values($request as element())
        as element() {
    let $docs := tt:getParams($request, 'doc docs dcat')    
    return
        <z:values countDocs="{count($docs)}">{
           ()
        }</z:values>
};        

declare function f:typeDemo($request as element())
        as element() {
    let $start as xs:date := tt:getParam($request, 'start')        
    let $ints as xs:integer+ := tt:getParam($request, 'numbers')    
    let $ts as element()+ := tt:getParam($request, 'ts')    
    let $date as xs:date := tt:getParam($request, 'date')    
    let $dayTimeDuration as xs:dayTimeDuration? := tt:getParam($request, 'dayTimeDuration')    
    let $normalizedString as xs:normalizedString? := tt:getParam($request, 'normalizedString')    
    let $token as xs:token? := tt:getParam($request, 'token')    
    let $positiveInteger as xs:positiveInteger? := tt:getParam($request, 'positiveInteger')    
    let $dcat as element(dcat)? := tt:getParam($request, 'dcat')    
    return
        <z:typeDemo>{
           <start>{$start}</start>,
           <ints>{$ints}</ints>,
           <ts>{$ts}</ts>,
           <date>{$date}</date>,
           <dayTimeDuration>{$dayTimeDuration}</dayTimeDuration>,          
           <normalizedString>{$normalizedString}</normalizedString>,           
           <token>{$token}</token>,           
           <positiveInteger>{$positiveInteger}</positiveInteger>,           
           <dcat>{$dcat}</dcat>           
        }</z:typeDemo>
};        

declare function f:parseItem_integerRanges($item as xs:string)
        as item()+ {
    let $item := normalize-space($item)
    return
        if (not(matches($item, '^(\d+|\d+-\d+)(\s+(\d+|\d+-\d+))*$'))) then
            tt:createTypeError('integerRanges', $item, 
                concat("Must be a WS separated sequence of items which are either integers or ",
                "pairs of integers separated by a '-'"))
    else
    
    let $comps := tokenize(normalize-space($item), ' ')
    return
        for $comp in $comps
        return
            if (contains($comp, '-')) then
                let $parts := tokenize($comp, '-')
                let $from := xs:integer($parts[1])
                let $to := xs:integer($parts[2])
                return
                    if ($from lt $to) then $from to $to
                    else $to to $from
            else
                xs:integer($comp)
};

(:~
 : Parses parameter item, type 'dateOffset', returns item value.
 :
 : @param itemText the item text
 : @return the item value, or an error element 
 :)
declare function f:parseItem_dateOffset($item as xs:string)
        as item() {
    (: validate text :)        
    if (not($item castable as xs:integer)) then
        tt:createTypeError('dateOffset', $item, 
            concat("Must be an integer number, representing ",
            "the number of days added to the current date"))
    else
    
    (: map text to value :)
    let $offset := xs:dayTimeDuration(concat('P', normalize-space($item), 'D'))
    return
        current-date() + $offset
};

declare function f:parseItem_travelScenario($item as xs:string)
        as element() {
    let $parts := tokenize(normalize-space($item), ' ')
    return
        (: validate text :)    
        if (count($parts) lt 4 or 
            not(every $part in $parts[position() le 3] satisfies $part castable as xs:date) or
            not(every $part in $parts[position() gt 3] satisfies $part castable as xs:integer)) then
        tt:createTypeError('travelScenario', $item, 
            concat("Must be a WS separated sequence of items: ",
            "booking date, start date, end date, traveller ages"))

        else
        
        (: map text to value :)
        <travelScenario>{
            <booking>{xs:date($parts[1])}</booking>,
            <start>{xs:date($parts[2])}</start>,            
            <end>{xs:date($parts[3])}</end>,
            <ages>{
                for $age in $parts[position() gt 3]
                let $ageInt := xs:integer($age)
                order by $ageInt descending
                return $ageInt
            }</ages>            
        }</travelScenario>
};

declare function f:facet_maxTodayPlus($item as item(), $facetValue as xs:string)
        as xs:boolean {
    let $date := xs:date($item)
    let $limit := xs:integer($facetValue)
    
    let $delta := $date - current-date()
    let $days := trace( fn:days-from-duration($delta) , 'DAYS: ')
    return
        $days le $limit
};    

declare function f:facet_minTodayPlus($item as item(), $facetValue as xs:string)
        as xs:boolean {
    let $date := xs:date($item)
    let $limit := trace( xs:integer($facetValue) , 'LIMIT: ')
    
    let $delta := $date - current-date()
    let $days := fn:days-from-duration($delta)
    return
        $days ge $limit
};    
