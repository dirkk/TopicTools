(:~ 
 : _stringTools.mod.xq - various tools for string processing
 :
 : @version 20140423-1 first version 
 : ===================================================================================
 :)

module namespace m="http://www.ttools.org/xquery-functions";

import module namespace i="http://www.ttools.org/xquery-functions" at
   "_constants.mod.xq";   

declare namespace z="http://www.ttools.org/structure";
(:~
 : Splits a string into % separated items. Occurrences of %
 : preceded by a backslash are not treated as separator. Within
 : the items, '%', backslash and '#' characters are expected to 
 : be escaped by a preceding backslash, and within the returned 
 : items these characters are represented without preceding 
 : backslash.
 :
 : Example: 
 :           'a%b%c' => 'a', 'b', 'c'
 :           'a\#\\\%aa%bbb' => 'a#\%aa', 'bbb'
 :
 : @param item the string to be split
 : @return the fields of the string
 :)
declare function m:_getItemFields($item as xs:string) 
        as xs:string* {
    m:_splitString($item, '%', '#')
};

(:~
 : Parses a string into a value and modifiers. The value is the
 : substring preceding the first non-escaped '#' character,
 : or the complete string if there is no non-escaped '#' character.
 : The modifiers are represented by the % separated entries following the
 : first non-escaped '#' character, each one of which consists 
 : of a modifier name and the modifier value, separated by a colon 
 : preceded and/or followed by optional whitespace. 
 
 where each item is expected to
 : have the syntax "modifierName:modifierValue".
 :
 : @param item the item text
 : @param modifierNames the names of valid modifiers
 :)
declare function m:_getValueAndModifiers($item as xs:string,
                                         $modifiersModel as element(modifiers)?) 
        as element(value) {
    let $sections := m:_splitString($item, '#', ())
    let $value := $sections[1]
    let $modifiers := m:_getItemModifiers($sections[2], $modifiersModel)
    let $errors := $modifiers/z:error
    return
        <value>{
            for $m in $modifiers/@* return $m,
            if ($errors) then $errors else $value
        }</value>
};

(:~
 : Parses a string into fields and modifiers. Fields are the
 : % separated items preceding the first non-escaped '#' character,
 : or all such items if there is no non-escaped '#' character.
 : The modifiers are represented by the % separated entries following the
 : first non-escaped '#' character, each one of which consists 
 : of a modifier name and the modifier value, separated by a colon 
 : preceded and/or followed by optional whitespace. 
 
 where each item is expected to
 : have the syntax "modifierName:modifierValue".
 :
 : @param item the item text
 : @param modifierNames the names of valid modifiers
 :)
declare function m:_getValueFieldsAndModifiers($item as xs:string,
                                              $modifiersModel as element(modifiers)?) 
        as element(valueFields) {
    let $sections := m:_splitString($item, '#', ())
    let $fields := m:_getItemFields($sections[1])
    let $modifiers := m:_getItemModifiers($sections[2], $modifiersModel)
    return
        <valueFields>{
            $modifiers/@*,
            $modifiers/z:error,
            for $field in $fields return <field>{$field}</field>
        }</valueFields>
};

(:~
 : Returns the modifiers of an item, as specified by a modifier string.
 : The modifier string is a % separated list of entries, each one of
 : which consists of a modifier name and the modifier value, separated by
 : a colon preceded and/or followed by optional whitespace. Example:
 :    foo:1 % bar : somestring
 :
 : The function returns a `modifiers` element whose attributes represent
 : the modifiers. If the function is executed without error, the result
 : element is empty; otherwise, it contains one or more`error` elements 
 : describing the errors.
 :
 : The modifier names are normalized according to a list of valid 
 : modifier names. For each supplied name, the normalized name is the 
 : one and only valid modifier name whose first part (or entirety) 
 : is case-insensitively equal to the supplied name. For each supplied 
 : modifer name which can be normalized, the result element contains
 : an attribute whose name and value represent the name and value of the
 : modifier. For each supplied name which cannot be normalized (either 
 : because there is none or more than one valid names beginning with 
 : the characters of the supplied string), the result element contains
 : an `errors`child element reporting the unexpected modifier name. 
 :
 : @param text the text specifying modifiers
 : @param modifierNames all valid modifier names 
 :) 
declare function m:_getItemModifiers($text as xs:string?,
                                     $modifiersModel as element(modifiers)?)
        as element(modifiers)? {
    if (not($text)) then () else
    
    let $entries := m:_splitString($text, '%', '#')
    let $modifierNames := $modifiersModel/*/@name
    let $modifiers :=
        for $entry in $entries
        let $rawName := replace($entry, '^\s*(\S*?)\s*:.*', '$1')
        let $value := replace($entry, '^\s*\S*?\s*:\s*(.*)', '$1')        
        let $matchingNames := m:_matchingNames($rawName, $modifierNames)
        return
            if (count($matchingNames) eq 1) then attribute {$matchingNames} {$value} 
            else if (count($matchingNames) eq 0) then
                <z:error type="UNKNOWN_MODIFIER_NAME" name="{$rawName}"
                    validNames="{$modifierNames}" modifierValue="{$value}"
                    msg="{concat('Unknown modifier name (', $rawName, 
                    '); valid names: ', string-join($modifierNames, ' '))}"/>
            else
                <z:error type="AMBIGUOUS_OPERATION_NAME" name="{$rawName}"
                    matchingNames="{string-join($modifierNames, ', ')}"
                    modifierValue="{$value}"
                    msg="{concat('Ambiguous operation name (', $rawName,
                    '); matching names: ', string-join($matchingNames, ', '))}"/>
    let $defaults :=
        let $namesSet := $modifiers[. instance of attribute()]/local-name(.)
        return
            $modifiersModel/*[not(@name = $namesSet)]/@default/attribute {../@name} {.}
    return
        <modifiers>{
            $modifiers/self::attribute(), 
            $defaults,
            $modifiers/self::*
        }</modifiers>       
};

(:~
 : Splits a string into items separated by the separator $sep. 
 : The separator is expected to be a single character. Occurrences 
 : of the separator preceded by a backslash are not treated as separator. 
 : Literal backslash characters and any characters contained by $escapedChars 
 : are expected to be escaped by a preceding backslash. In the returned items, 
 : escaped characters (the separator character, backslash and any characters 
 : contained by $escapedChars) are represented without the preceding escape 
 : character.
 :
 : @param s the string to be split
 : @param sep the separator at which to split
 : @param escapedChars all characters within this string are expected to be
 :    escaped by preceding backslash
 : @return the items
 :) 
declare function m:_splitString($s as xs:string?, $sep as xs:string, $escapedChars as xs:string?)
        as xs:string* {
    for $item in m:_splitStringRC($s, $sep)   
    let $item := replace($item, concat('\\([\\', $sep, $escapedChars, '])'), '$1')          
    return 
        $item
};

(:~
 : Recursive helper function of _splitString. Note that the returned items
 : contain the original text - doubled backslashes are not yet replaced by
 : single backslashes, and separators preceded by backslash or not yet replaced
 : by the separator itself.
 :
 : @param s the string to be split
 : @param sep the separator character
 : @return the items
 :) 
declare function m:_splitStringRC($s as xs:string?, $sep as xs:string)
        as xs:string* {
    if (empty($s)) then () else
    
    (: the next item preceding a separator, or the whole string, if there is no separator;
       effective separators must not be preceded by an even number of backslashes
             (\\\\)*
       An even number of backslashes is either occurring at the beginning of the string, or
       it is preceded by a substring ending with a non-backslash character: 
             (.*?[^\\])?
    :)
    let $item := replace($s, concat('^ ( (.*?[^\\])? (\\\\)* )?', $sep, '.*'), '$1', 'sx')    
    return 
        if ($item eq $s) then $s
        else    
            let $next := replace(substring($s, string-length($item) + 2), '^\s+', '')
            return (
                $item,
                if (not(string($next))) then () else m:_splitStringRC($next, $sep)
            )            
};        

(:~
 : Edits a sequence of strings removing prefixes as specified. If
 : a $prefixTerminator is specified, any prefix not ending with this
 : string is edited before use, appending the terminator.
 :
 : @param strings the strings to be edited
 : @param prefixes the prefixes to be removed
 : @param prefixTerminator if specified, any prefix not ending with this
 :    string is edited before use by appending this string
 : @return the edited names
 :)
declare function m:removeStringPrefixes($strings as xs:string*, 
                                        $prefixes as xs:string*,
                                        $prefixTerminator as xs:string?)
        as xs:string* {
        
    (: prefix editing: add trailing dot, if not already present :)
    let $prefixes := 
        if (empty($prefixTerminator)) then $prefixes else
        for $p in $prefixes 
        return
            if (ends-with($p, $prefixTerminator)) then $p 
            else concat($p, $prefixTerminator)
            
    for $s in $strings
    let $matchingPrefixes := $prefixes[starts-with($s, .)]
    return
        if (empty($matchingPrefixes)) then $s
        else
            let $matchingPrefix :=
                if (count($matchingPrefixes) gt 1) then
                    let $maxLen := max(for $p in $matchingPrefixes return string-length($p))
                    return $matchingPrefixes[string-length(.) eq $maxLen][1]
                else $matchingPrefixes
        return
            substring-after($s, $matchingPrefix)
};

(:~
 : Returns for a given name the normalized name(s) which the given name matches. 
 : The matches are determined as follows: (a) if there are candidate names which
 : are equal to the given name, ignoring case - the first or these candidate names;
 : (b) otherwise - all candidate names which start with the given name, ignoring case.
 : 
 : @param rawName the name as specified in the original request data
 : @return the matching name(s)
 :)
declare function m:_matchingNames($rawName as xs:string, $candidateNames as xs:string*)
        as xs:string* {
    if (empty($candidateNames)) then () else
    
    let $exactMatch := $candidateNames[matches($rawName, concat('^', ., '$'), 'i')][1]
    return
        if (exists($exactMatch)) then $exactMatch
        else
            let $rawPattern := concat('^', $rawName)
            let $matches := $candidateNames[matches(., $rawPattern, 'i')]
            return
                $matches
};

declare function m:_escapeReplacementString($s as xs:string)
        as xs:string {
    replace(replace($s, '\\', '\\\\'), '\$', '\\\$')    
};        



