module namespace m="http://www.ttools.org/xquery-functions";

declare namespace z="http://www.ttools.org/structure";

(:~
 : Parses a name filter text into a structured represenation.
 :
 : A name filter is a list of positive and/or negative filters.
 : The filter is passed if:
 : - none of the negative filters is passed
 : - there are no positive filters, or at least one of them is passed
 :
 : Name pattern syntax: 
 :    name filter = whitespace separated list of filter items
 :    filter-item = positive-item or negative-item
 :    positive-item = pattern | pattern#options
 :    pattern = a name in glob syntax ('?' and '*' represent one or 
 :       any number of unknown characters); by default case insensitive
 :    options = c | r 
 :        r - name pattern shall be interpreted as regular expression, not as pattern
 :        c - case sensitive 
 :    negative-item = ~pattern | ~pattern#options
 :  
 :    Example:
 :    '[A-Z]{3}#rc a\d+#r msg* *RQ#c ~*test*
 :    =>
 :    matches
 :    * must not contain the string 'test' (case insensitive)
 :    * must satisfy one of the following:
 :      - match the regex [A-Z]{3} (case sensitive) 
 :      - match the regex a\d+ (case insensitive) 
 :      - start with 'msg' (case insensitive)
 :      - end with 'RQ' (case sensitive)
 :
 : @param names the name filter text, syntax as described above
 : @return a 'nameFilter' element which is a structured representation 
 :    of the name filter
 :)
declare function m:parseNameFilter($text as xs:string?)
        as element()? {
    if (not($text)) then () else 
   
    let $filter := m:_parseNameFilter($text, ())
    let $errors := $filter/descendant-or-self::z:error    
    return
        if (not($errors)) then $filter else
            <z:errors source="{$text}">{$errors}</z:errors>    
};

(:~
 : Parses the text of a name filter map into a structured represenation.
 :
 : This function variant is called without specifying the name filter
 : map type. It delegates the processing to the function variant which has 
 : an optional second parameter specifying the name filter map type.
 : Note that the name filter map type may specify a value type, as
 : for example in nameFilterMap(xs:integer).
 :
 : @param source the source text
 : @return the name filter map element
 :) 
declare function m:parseNameFilterMap($source as xs:string?)
        as element()? {
    if (not($source)) then () else m:parseNameFilterMap($source, ())
};    

(:~
 : Parses the text of a name filter map into a structured represenation.
 :
 : A name filter map associates values with name filters. Given a name, 
 : the function "nameFilterMapValue" returns the first value associated 
 : with a name filter which the name matches.
 :
 : @param source the source text
 : @param type the name filter map type, which may optionally specify 
 :    a value type (as in nameFilterMap(xs:integer))
 : @return the name filter map element
 :) 
declare function m:parseNameFilterMap($source as xs:string?, $type as xs:string?)
        as element()? {
    if (not($source)) then () else

    let $valueType := 
        if (not($type) or not(matches($type, '^nameFilterMap\(.*\)$'))) then ()
        else
            let $valueTypeName := replace($type, '^nameFilterMap\((.*)\)$', '$1')
            return
                if (not($valueTypeName =
                    tokenize('xs:boolean xs:int xs:integer xs:long xs:string', '\s+'))) then
                        <z:error type="TYPE_ERROR" source="{$source}" typeName="{$type}"
                           valueType="{$valueTypeName}" 
                           msg="{concat('Unknown (or not yet supported) name filter map value type: ', 
                                 $valueTypeName)}"/>
                else
                    $valueTypeName
    return
        if ($valueType instance of element(z:error)) then <z:errors>{$valueType}</z:errors> else
        
    let $items := tokenize($source, '%\s*')
    let $mapEntries :=    
        for $item in $items
        return
            if (not(contains($item, ':'))) then <entry value="{$item}"/>
            else
                let $value := replace($item, '\s+|\s*:.*', '')
                let $patterns := replace($item, '.*:\s*', '')
                let $filter := m:parseNameFilter($patterns)
                let $error := trace(
                    if (not($valueType)) then () 
                    else if ($valueType eq 'xs:boolean' and not($value castable as xs:boolean)) then true()
                    else if ($valueType eq 'xs:int' and not($value castable as xs:int)) then true()                    
                    else if ($valueType eq 'xs:integer' and not($value castable as xs:integer)) then true()                    
                    else if ($valueType eq 'xs:long' and not($value castable as xs:long)) then true()                    
                    else if ($valueType eq 'xs:string' and not($value castable as xs:string)) then true()
                    else ()         , concat('VALUE=', $value, '; ERROR: '))           
                return
                    if ($error) then                   
                        <z:error type="TYPE_ERROR" source="{$source}" typeName="{$type}"
                           valueType="{$valueType}" 
                           msg="{concat('Value ''', $value, ''' not castable to value type: ', 
                                 $valueType)}"/>                                 
                    else                           
                        <entry value="{$value}">{$filter}</entry>
                     

    let $defaultEntries := $mapEntries[not(*)]
    let $errors := $mapEntries/self::z:error
    return
        if ($mapEntries/self::z:error) then <z:errors>{$errors}</z:errors>
        else
            <nameFilterMap>{
                if (not($valueType)) then () else attribute valueType {$valueType},
                $mapEntries except $defaultEntries,
                $defaultEntries[1]
            }</nameFilterMap>
};

(:~
 : Parses the text of a path filter. A path filter is a list 
 : of one or several namefilters, separater by '/' or '//'.
 : 
 : @param text the text to be parsed
 : @return a structured representation of the path filter.
 :)
declare function m:parsePathFilter($text as xs:string)
        as item()? {
    if (not($text)) then () else
    
    let $text := replace($text, '^\s+|\s+$', '')
    let $parts := 
        (: special case: if the path filter consists of a single name filter path,
           the surrounding parentheses may be omitted; this case is recognized by:
           (a) text does not start with ( or ~); (b) text contains '/';
           example: (a* b* / c* d*) is equivalent to: a* b* / c* d*  
        :)
        if (not(matches($text, '(^|~|\s)\(')) and contains($text, '/')) then
            trace(m:parseNameFilterPath($text), 'NAME_FILTER_PATH: ')
        else    
            trace(m:_parsePathFilterRC($text), 'PATH_FILTER_PARTS: ')
    let $errors := $parts/descendant-or-self::z:error    
    return    
        if ($errors) then
            <z:errors source="{$text}">{$errors}</z:errors>    
    else        
        
    let $pos := $parts[not(@negative eq 'true')]
    let $neg := $parts[@negative eq 'true']
    return 
        <pathFilter source="{$text}">{
            if (not($pos)) then () else <filterPos>{$pos}</filterPos>,
            if (not($neg)) then () else <filterNeg>{$neg}</filterNeg>        
        }</pathFilter>

};

(:~
 : Parses the text of a name filter path. A name filter path
 : is either a name filter item or sequence of name filters
 : separated by '/' or '//'. Examples:
 :    a*
 :    ~*b
 :    a* ~*b / ~c* d* 
 :    a*//b*/c* ddd 
 :
 : @param text the text to be parsed
 : @return a structured representation of the path filter item,
 :    followed by the substring which follows after the parsed
 :    text and remains to be parsed.
 :)
declare function m:parseNameFilterPath($text as xs:string)
        as item()* {
    m:_parseNameFilterPath($text, ())        
};

(:~
 : Helper function of function 'parseNameFilter'.
 :
 :)
declare function m:_parseNameFilter($text as xs:string?, $atts as attribute()*)
        as element(nameFilter)? {
    let $patternList := tokenize($text, '\s+')
    let $patternsPlus := $patternList[not(starts-with(., '~'))]   
    let $patternsMinus := for $n in $patternList[starts-with(., '~')] return substring($n, 2)
    return
        <nameFilter sourceValue="{$text}">{
            $atts,
            let $filterPos := for $p in $patternsPlus return m:_parseNameFilterItem($p, ())
            let $filterNeg := for $p in $patternsMinus return m:_parseNameFilterItem($p, ())
            return (
                if (not($filterPos)) then () else <filterPos>{$filterPos}</filterPos>,
                if (not($filterNeg)) then () else <filterNeg>{$filterNeg}</filterNeg>
            )                
        }</nameFilter>
};

(:~
 : Parses a name filter item and constructs a 'filter'
 : element capturing the results.
 :
 : @param s the item text
 : @param atts attributes to be attached to the result element
 : @return a 'filter' element which is a structured representation of the item
 :)
declare function m:_parseNameFilterItem($s as xs:string, $atts as attribute()*)
        as element(filter) {
    let $isRegex := contains(substring-after($s, '#'), 'r')         
    let $options :=        
        let $raw := replace(substring-after($s, '#'), 'r', '') return
            if (contains($raw, 'c')) then replace($raw, 'c', '') else concat('i', $raw)
    let $patternRaw := replace($s, '#.*', '')
    let $patternExp := if ($isRegex) then $patternRaw else replace(replace($patternRaw, '\*', '.*'), '\?', '.?')
        let $pattern := concat('^', $patternExp, '$')
        return
            <filter pattern="{$pattern}" options="{$options}">{$atts}</filter>
};

(:~
 : Recursive helper function of '_parsePathFilter'.
 :
 : @param text the text which remains to be parsed.
 : @return a structured representation of the next
 :    path filter item, followed by the text which
 :    follows the parsed text and remains to be parsed.
 :)
declare function m:_parsePathFilterRC($text as xs:string)
        as item()* {
    let $head := replace($text, '^\s+', '')
    return
        if (not($head)) then ()
        else if (starts-with ($head, '(') or starts-with($head, '~(')) then
            let $neg :=
                if (starts-with($head, '~')) then true() else ()
            let $negFlag := if (not($neg)) then () else attribute negative {'true'}
            let $head := if ($neg) then substring($head, 2) else $head
            let $pathEtc := trace( m:_parseNameFilterPath($head, $negFlag) , 'PARSE_NAME_FILTER_PATH: ')
            return
                if ($pathEtc[. instance of node()]/self::z:error) then $pathEtc else (
                    $pathEtc[1],
                    if (not($pathEtc[2])) then () else
                        m:_parsePathFilterRC($pathEtc[2])
                )
        else
            let $neg :=
                if (starts-with($head, '~')) then true() else false()   
            let $atts := if (not($neg)) then () else attribute negative {true()}         
            let $item := replace($head, '\s.*', '')
            let $text := if ($neg) then substring($item, 2) else $item          
            let $itemParsed := m:_parseNameFilterItem($text, $atts)
            let $tail := substring($head, 1 + string-length($item))[normalize-space(.)]
            return
                if (not($itemParsed)) then () else (
                    $itemParsed,                
                    m:_parsePathFilterRC(replace($tail, '^\s+', ''))
                )            
};

(:~
 : Parses a path filter item, which is either a name filter item
 : (e.g. a* or ~*b) or a name filter path (e.g. a* ~*b / c*).
 :
 : @param text the text to be parsed
 : @return a structured representation of the path filter item,
 :    followed by the substring which follows after the parsed
 :    text and remains to be parsed.
 :)

declare function m:_parseNameFilterPath($text as xs:string, $atts as attribute()*)
        as item()* {
    let $pathText := trace(        
        if (not(starts-with($text, '('))) then replace($text, '^\s+|\s+$', '') else
            replace($text, '^(\((.*?[^\\])?(\\\\)*\)).*', '$1') 
        , 'PATHTEXT: ')
    let $next := trace(
        if (not(starts-with($text, '('))) then () else            
            substring($text, 1 + string-length($pathText)) 
        , 'NEXT: ')    
    return
        if (trace(matches($next, '^\S'), 'MATCHES: ')) then 
            <z:error source="{$text}" msg="{concat('Name filter path in parentheses must be followed by ',
                'whitespace or string end; found: ', $text)}"/> 
        else if (starts-with($pathText, '(') and not(ends-with($pathText, ')'))) then 
            <z:error source="{$text}" msg="{concat('Name filter path preceded by ( but not followed by ); ',
                'text: ', $text)}"/>
        else

        let $pathTextChopped := trace( replace($pathText, '^\(|\)$', '') , 'TEXT: ')
        let $next := trace( substring($text, 1 + string-length($pathText))[normalize-space(.)] , 'NEXT: ')
        return
            (: closing parenthesis must be followed by whitespace or string end;
               if not => parse error => return empty sequence :)
            if (matches($next, '^\S')) then () else
            
        let $parsed :=
            <nameFilterPath source="{$pathTextChopped}">{
                $atts,
                m:_parseNameFilterPathRC($pathTextChopped)
            }</nameFilterPath>

        return ($parsed, $next)
};

(:~
 : Recursive helper function of 'parseNameFilterpath'.
 :)
declare function m:_parseNameFilterPathRC($text as xs:string)
      as element()* {
    let $s := trace( replace($text, '^\s+', '') , 'S: ')
    let $sep := trace(
        if (not(starts-with($s, '/'))) then () else
            replace($s, '^(/+).*', '$1')  , 'SEP: ')
    let $sepAtt := if (not($sep)) then () else attribute sep {$sep}
    let $afterSep := trace(
        if ($sep) then replace($s, '^/+\s*', '') else $s , 'AFTER_SEP: ')
    return
        if (not(contains($afterSep, '/'))) then m:_parseNameFilter($afterSep, $sepAtt)
        else
            let $step := substring-before($afterSep, '/')
            let $next := substring($afterSep, 1 + string-length($step))
            return (
                m:_parseNameFilter($step, $sepAtt),
                m:_parseNameFilterPathRC($next)
            )
};
