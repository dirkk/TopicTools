(: util.mod.xq - various utility functions of the ttools application
 :
 : @version 20140616-1 
 : ===================================================================================
 :)

module namespace f="http://www.ttools.org/ttools/xquery-functions";

import module namespace tt="http://www.ttools.org/xquery-functions" at
    "_constants.mod.xq",
    "_reportAssistent.mod.xq";    
    
declare namespace z="http://www.ttools.org/ttools/structure";
declare namespace soap="http://schemas.xmlsoap.org/soap/envelope/";

declare variable $f:serParamsText :=        
        <output:serialization-parameters>
            <output:method value='text'/>
        </output:serialization-parameters>;

declare variable $f:serParamsXml :=        
        <output:serialization-parameters>
            <output:method value='xml'/>
            <output:indent value='yes'/>            
        </output:serialization-parameters>;

(:~
 : Determines the tool name. Throws an error if no valid tool name can be determined
 :
 : @param directory the application directory
 : @param name the application name, as specified via 'name' parameter  
 : @return the tool name
 :) 
declare function f:getToolName($directory as xs:string, $name as xs:NCName?)
        as xs:NCName {
    if ($name) then $name else
        
    let $derived := replace(replace($directory, '[/\\]$', ''), '^.*[/\\]', '')
    return
        if (not($derived castable as xs:NCName)) then
            error(QName((), 'INVALID_ARG'), concat('Tool name must be an NCName, but the implicit tool name ',
                     '(= application directory) is not an NCName: ', $derived, ' ; use a different directory, ',
                    'or specify the tool name explicitly using parameter "name".'))                
        else xs:NCName($derived)
};

(:~
 : Retrieves the tool settings from the tool directory.
 :
 : @param directory the tool directory
 : @param name the tool name
 : @return the tool settings
 :)
declare function f:getToolSettings($directory as xs:string, $toolName as xs:NCName)
        as element()? {
    let $useDir := resolve-uri($directory, static-base-uri())   
    let $settingsURI := concat($useDir, '/', $toolName, '-settings.xml')     
    return 
        if (doc-available($settingsURI)) then doc($settingsURI)/* 
        else ()
            
};

(:~
 : Returns the tool flavor. If request parameter 'flavor' is set,
 : the value is used; otherwise, it is attempted to retrieve the
 : value from the tool settings; if this is not possible, the
 : builtin dafault is used ('xq30f').
 :
 : @param request the operation request
 : @param settings the tool settings
 : @return the flavor
 :)
declare function f:getToolFlavor($request as element(), $toolSettings as element()?)
        as xs:string {
    let $explicit := tt:getParam($request, 'flavor')
    return
        if ($explicit) then $explicit
        else 
            let $read := $toolSettings/flavor/string()
            return
                if ($read) then $read else 'xq30f'        
};        

(:~
 : Returns the tool namespace. If request parameter 'namespace' is set,
 : the value is used; otherwise, it is attempted to retrieve the
 : value from the tool settings; if this is not possible, the
 : builtin dafault is used ('http://www.ttools.org/TOOLNAME/xquery-functions').
 :
 : @param request the operation request
 : @param settings the tool settings
 : @return the flavor
 :)
declare function f:getToolNamespace($request as element(), $toolName as xs:string, $toolSettings as element()?)
        as xs:string {
    let $explicit := tt:getParam($request, 'namespace')
    return
        if ($explicit) then $explicit
        else 
            let $read := $toolSettings/namespace/string()
            return
                if ($read) then $read else concat('http://www.ttools.org/', $toolName, '/xquery-functions')        
};        

(:~
 : Prettifies XML by removing pretty print text nodes.
 :)
declare function f:pretty($n as node())
        as node()? {
    typeswitch($n)
    case document-node() return 
        for $c in $n/node() return document {f:pretty($c)}
    case element() return
        element {node-name($n)} {
            for $a in $n/@* return f:pretty($a),
            for $c in $n/node() return f:pretty($c)
        }
    case text() return
        if ($n/.. and not(matches($n, '\S'))) then () else $n
    default return $n
};

(:~
 : Determines the features implied by the tool flavor.
 : The available features are:
 : xq10ge - supports XQuery 1.0 (at least)
 : xq10 - supports XQuery 1.0 (not more)
 : xq30ge - supports XQuery 3.0 (at least)
 : xq30 - supports XQuery 3.0 (not more)
 : file - supports the EXPath file module
 : file- - does not support the EXPath file module 
 :
 : @param flavor - the tool flavor
 : @return the features implied
 :)
 declare function f:featuresFromFlavor($flavor as xs:string)
        as xs:string* {
    let $qvers := replace($flavor, '^(xq\d+)(.*)', '$1')
    let $additional := replace($flavor, '^(xq\d+)(.*)', '$2')
    return (
        $qvers,
        concat($qvers, 'ge'),
        if (contains($additional, 'f')) then 'file' else 'file-'
    )
};

(:~
 : Filters a text by features. Any section requiring particular features
 : (to be discarded unless all features are present) is started by a
 : feature requirement declaration with the following syntax:
 : (:#feature?( feature)*#:)
 : where 'feature' is the name of a feature, which must be an NCName. 
 : Examples:
 :
 : (:#xq10#:)
 : (:#xq30ge file:)
 : (:##:)
 :
 : @param text the text to be filtered
 : @features the features
 : @return the filtered text
 :)
declare function f:filterTextByFeatures($text as xs:string, $features as xs:string*)
        as xs:string {
    let $lineElems := 
        <lines>{
            for $line in tokenize($text, '&#xD;?&#xA;')
            return
                if (matches($line, '^\(:#((\i\c*)(\s+\i\c*)*)?#:\)\s*$')) then
                    let $requiredFeatures := replace($line, '^\(:#((\i\c*)(\s+\i\c*)*)?#:\)\s*$', '$1')
                    return
                        <features>{
                            for $f in tokenize(normalize-space($requiredFeatures), ' ') return <feature>{$f}</feature>
                        }</features> 
                else
                    <line>{$line}</line>
        }</lines>                    
    let $lines :=                
        for $lineElem in $lineElems/*
        return
            if ($lineElem/self::features) then () else
                let $required := $lineElem/preceding-sibling::features[1]/feature/string()[string(.)]
                return
                    if (empty($required) or (every $f in $required satisfies $f = $features)) then string($lineElem)
                    else ()
    return
        string-join($lines, '&#xA;')
};

