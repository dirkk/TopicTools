(:~
nameFilter.mod.xq - utility functions for name filtering

writeNameFilter - compiles a whitespace separated list of name patterns into a
                  filter element
writeNameFilterPath - ...   
filterNames - filters a list of names, using a supplied name filter
matchesNameFilterSome - ...
matchesNameFilter - ...

Version 20130822-1 #r => pattern is a regex
Version 20130113-1
:)

(: ============================================================================== :)

module namespace m="http://www.ttools.org/xquery-functions";

(: 
=================================================================

   p u b l i c    f u n c t i o s
   
=================================================================
:)

(:~
 : Filters a sequence of names by a name filter. The name filter
 : was previously obtained by passing a whitespace separated list
 : of name patterns to function 'writeNameFilter'.
 :
 : @TODO Change return type to xs:boolean, check the consequences.
 :
 : @params name the name to be checked
 : @return the filtered names
 :)
declare function m:matchesNameFilter(
                        $name as xs:string?, 
                        $filter as element(nameFilter)?)
      as xs:boolean? {
    if (empty($name)) then () else      
    if (empty($filter)) then true() else

      (empty($filter/filterPos/filter) or 
            (some $f in $filter/filterPos/filter satisfies matches($name, string($f/@pattern), string($f/@options)))) and
      (every $f in $filter/filterNeg/filter satisfies not(matches($name, string($f/@pattern), string($f/@options)))) 
};

(:~
 : Checks if a sequence of names contains at least one name
 : matching a name filter. More precisely, returns true if 
 : there is at least one name which is not removed by the filter.
 :
 : Note. This implies that the function returns false
 : if the sequence of names is empty, and the function
 : returns true if there are names but there is no
 : name filter.
 :
 : @params names the names to be checked
 : @return true if there is at least one name not removed
 :    by the filter
 :)
declare function m:matchesNameFilterSome(
                        $names as xs:string*, 
                        $filter as element(nameFilter)?)
      as xs:boolean {
   if (empty($names)) then false()
   else if (empty($filter)) then true() else
      some $name in $names satisfies
         $name
            [empty($filter/filterPos/filter) or (some $f in $filter/filterPos/filter 
                   satisfies matches(., string($f/@pattern), string($f/@options)))]
            [every $f in $filter/filterNeg/filter 
                   satisfies not(matches(., string($f/@pattern), string($f/@options)))] 
};

(:~
 : Filters a sequence of names by a name filter. The name filter
 : was previously obtained by passing a whitespace separated list
 : of name patterns to function 'writeNameFilter'.
 :
 : @params names the names to be filtered
 : @return the filtered names
 :)
declare function m:filterNames(
                        $names as xs:string*, 
                        $filter as element(nameFilter)?)
        as xs:string* {
   if (empty($filter)) then $names else
   $names
      [empty($filter/filterPos/filter) or 
        (some $f in $filter/filterPos/filter satisfies 
            matches(., string($f/@pattern), string($f/@options)))]
      [every $f in $filter/filterNeg/filter satisfies 
        not(matches(., string($f/@pattern), string($f/@options)))] 
};

(:~
 : Retrieves the value associated with a name according to
 : a name filter map. The name filter map can optionally specify 
 : a value type. If a value type is specified, the value returned
 : by this function is typed correspondingly.
 :
 : @DO_IT: Currently only these types are supported:
 :    xs:boolean xs:int xs:integer xs:long xs:string 
 :
 : @param name the name with which the value is associated
 : @param nameFilterMap a name filter map which associates values
 :    with name patterns
 : @param defaultValue an optional default value
 : @return the value associated with the name
 :)
declare function m:nameFilterMapValue($name as xs:string, 
                                      $nameFilterMap as element(nameFilterMap)?, 
                                      $defaultValue as xs:anyAtomicType?)
        as xs:anyAtomicType? {
    if (not($nameFilterMap)) then $defaultValue else
    
    let $value := $nameFilterMap/entry[nameFilter][m:matchesNameFilter($name, nameFilter)][1]/@value         
    let $value :=
        if (exists($value)) then $value else
            let $value := $nameFilterMap/entry[not(*)][1]/@value
            return
                if (exists($value)) then $value else $defaultValue
    return
        if (not($value)) then () else
            let $valueType := $nameFilterMap/@valueType/string()
            return
                if (not($valueType)) then $value else
                    if ($valueType eq 'xs:boolean') then xs:boolean($value)
                    else if ($valueType eq 'xs:int') then xs:int($value)                    
                    else if ($valueType eq 'xs:integer') then xs:integer($value)                    
                    else if ($valueType eq 'xs:long') then xs:long($value)                    
                    else if ($valueType eq 'xs:string') then xs:string($value)                    
                    else $value
};

(:~
 : Checks whether a path matches a path filter.
 :
 : @param path the path to be checked
 : @param pathFilter the path filter against which to check
 : @return the boolean check result, or the empty sequence
 :    in case of an error
 :)
declare function m:matchesPathFilter(
                    $path as xs:string?,
                    $filterPath as element(pathFilter)?)
        as xs:boolean? {

    let $path := replace(replace($path, '^[A-Z]:', ''), '\\', '/')
    let $path := replace($path, '^/', '')
    let $steps := tokenize($path, '/')
    let $lastStep := $steps[last()]
            
    let $pos1 := $filterPath/filterPos/filter
    let $pos2 := $filterPath/filterPos/nameFilterPath
    let $neg1 := $filterPath/filterNeg/filter
    let $neg2 := $filterPath/filterNeg/nameFilterPath
    
    let $posResult :=
        if (not(($pos1, $pos2))) then true() else
        
        let $posResult1 :=
            if (not($pos1)) then false() else
                some $f in $pos1 satisfies matches($lastStep, string($f/@pattern), string($f/@options)) 
        return
            if ($posResult1) then true() 
            else if (not($pos2)) then false() else
                some $f in $pos2 satisfies m:matchesNameFilterPath($path, $f)
            
    return
        if (not($posResult)) then false() 
        else if (not(($neg1, $neg2))) then true()
        else
            not(some $f in $neg1 satisfies 
                    matches($lastStep, string($f/@pattern), string($f/@options)))
            and
            not(some $f in $neg2 satisfies 
                    m:matchesNameFilterPath($path, $f))    
};

(:~
 : Checks whether a path matches a name filter path.
 :
 : @param path the path to be checked
 : @param filterPath the filter path against which to check
 : @return the boolean check result, or the empty sequence
 :    in case of an error
 :)
declare function m:matchesNameFilterPath(
                    $path as xs:string?,
                    $filterPath as element(nameFilterPath)?)
        as xs:boolean? {
    if (not($path)) then ()
    else if (not($filterPath)) then true() else
    
    let $path := replace(replace($path, '^[A-Z]:', ''), '\\', '/')
    let $path := replace($path, '^/', '')
    let $steps := tokenize($path, '/')
    let $filterSteps := $filterPath/*
    
    return 
        m:_matchesNameFilterPath($steps, $filterSteps)
};        

(: 
=================================================================

   p r i v a t e    f u n c t i o s
   
=================================================================
:)

(:~
 : Checks whether a path matches a name filter path.
 :
 : @param path the path to be checked
 : @param filterPath the filter path against which to check
 : @return the boolean check result, or the empty sequence
 :    in case of an error
 :)
declare function m:_matchesNameFilterPath(
                    $steps as xs:string*,
                    $filterSteps as element()*)
        as xs:boolean? {
    if (empty($steps)) then () else
        m:_matchesNameFilterPathRC($steps, $filterSteps)
};        

declare function m:_matchesNameFilterPathRC(
                    $steps as xs:string*,
                    $filterSteps as element()*)
        as xs:boolean? {
    if (empty($steps)) then false() else
    
    let $step1 := $steps[1]
    let $filterStep1 := $filterSteps[1]
    let $sep := $filterStep1/@sep
    return
        if ($sep eq '/') then
            if (not(m:matchesNameFilter($step1, $filterStep1))) then false()
            else
                if (count($steps) eq 1) then
                    if (count($filterSteps) eq 1) then true() else false()
                else
                    if (count($filterSteps) eq 1) then false() else
                        m:_matchesNameFilterPathRC(subsequence($steps, 2), subsequence($filterSteps, 2))

        else
            let $matchCandidates :=
                if (count($filterSteps) eq 1) then $steps[last()] 
                    else $steps
            let $nextMatchingStepNr := m:_getNextMatchingStep($matchCandidates, $filterStep1)
            return
                if (empty($nextMatchingStepNr)) then false()
                (: match is the last step => true/false if the filter step was the last one :) 
                else if ($nextMatchingStepNr eq count($matchCandidates)) then 1 eq count($filterSteps)
                (: match is a non-last step :)
                else
                    let $try :=
                        (: no remaining filter steps => false :)                         
                        if (1 eq count($filterSteps)) then false()
                        (: remaining filter steps => continue :)                            
                        else
                            m:_matchesNameFilterPathRC(subsequence($matchCandidates, $nextMatchingStepNr + 1), 
                                subsequence($filterSteps, 2))
                    return                          
                        if ($try) then true() else
                            let $retrySteps :=  subsequence($matchCandidates, 1 + $nextMatchingStepNr)
                            let $retryNameFilters := subsequence($filterSteps, 2)
                            return
                                m:_matchesNameFilterPathRC($retrySteps, $retryNameFilters)
};

declare function m:_getNextMatchingStep($steps as xs:string*, $filterStep as element())
        as xs:integer? {
    m:_getNextMatchingStepRC($steps, $filterStep, 0)        
};

declare function m:_getNextMatchingStepRC($steps as xs:string*, $filterStep as element(), $sofar as xs:integer)
        as xs:integer? {
    if (empty($steps)) then () else
    let $step1 := $steps[1]
    let $sofar := $sofar + 1
    return
        if (m:matchesNameFilter($steps[1], $filterStep)) then $sofar else
            m:_getNextMatchingStepRC(subsequence($steps, 2), $filterStep, $sofar)
};
(:
declare function m:matchesNameFilterPath(
                    $path as xs:string?,
                    $filterPath as element(nameFilterPath)?)
        as xs:boolean? {
    if (not($path)) then ()
    else if (not(trace($filterPath, 'NAMEFILTERPATH: '))) then true() else
    
    let $path := replace(replace($path, '^[A-Z]:', ''), '\\', '/')
    let $steps := tokenize($path, '/')[position() gt 1]
    let $filterSteps := $filterPath/*
    
    return 
        m:matchesNameFilterPathRC($steps, $filterSteps)
};        

declare function m:matchesNameFilterPathRC(
                    $steps as xs:string*,
                    $filterSteps as element()*)
        as xs:boolean? {
    if (empty($steps)) then false() else
    
    let $step1 := $steps[1]
    let $filterStep1 := $filterSteps[1]
    return
        if ($filterStep1/self::sep[. eq '/']) then
            if (not(m:matchesNameFilter($step1, $filterSteps[2]))) then false()
            else
                if (count($steps) eq 1) then
                    if (count($filterSteps) eq 2) then true() else false()
                else
                    if (count($filterSteps) eq 2) then false() else
                        m:matchesNameFilterPathRC(subsequence($steps, 2), subsequence($filterSteps, 3))

        else
            let $nextFilterIndex := if ($filterStep1/self::sep) then 2 else 1
            let $nextFilterStep := $filterSteps[$nextFilterIndex]
            let $matchCandidates :=
                if ($nextFilterIndex eq count($filterSteps)) then $steps[last()] 
                    else $steps
            let $nextMatchingStepNr := m:getNextMatchingStep($matchCandidates, $nextFilterStep)
            return
                if (empty($nextMatchingStepNr)) then false()
                else if ($nextMatchingStepNr eq count($matchCandidates)) then $nextFilterIndex eq count($filterSteps)                   
                else
                    let $try :=
                        (: not last step, but last filter step => try next step :)                         
                        if ($nextMatchingStepNr lt count($matchCandidates) and 
                            $nextFilterIndex eq count($filterSteps)) then false()
                        (: not last step => try this step :)                            
                        else
                            m:matchesNameFilterPathRC(subsequence($matchCandidates, $nextMatchingStepNr + 1), 
                                subsequence($filterSteps, 1 + $nextFilterIndex))
                    return                          
                        if ($try) then true() else
                            let $retrySteps :=  subsequence($matchCandidates, 1 + $nextMatchingStepNr)
                            let $retryNameFilters := subsequence($filterSteps, $nextFilterIndex)
                            return
                                m:matchesNameFilterPathRC($retrySteps, $retryNameFilters)
};

declare function m:getNextMatchingStep($steps as xs:string*, $filterStep as element())
        as xs:integer? {
    m:getNextMatchingStepRC($steps, $filterStep, 0)        
};

declare function m:getNextMatchingStepRC($steps as xs:string*, $filterStep as element(), $sofar as xs:integer)
        as xs:integer? {
    if (empty($steps)) then () else
    let $step1 := $steps[1]
    let $sofar := $sofar + 1
    return
        if (m:matchesNameFilter($steps[1], $filterStep)) then $sofar else
            m:getNextMatchingStepRC(subsequence($steps, 2), $filterStep, $sofar)
};
:)


(:
(:~
 : Translates a name list into a name filter.
 :
 : Name pattern syntax: '*' is interpreted as wildcard, 
 :    leading '~' turns the pattern into a negative
 :    pattern, suffix '#c' makes the pattern
 :    case sensitive. Example:
 :    '*RQ#c *RS#c ~*test*
 :    =>
 :    matches must end with 'RQ' or 'RS' (case sensitive),
 :    but must not contain the string 'test' (case insensitive)
 :
 : @param names whitespace separated list of name patterns
 :    using name pattern syntax
 : @return a "nameFilter" element
 :)
declare function m:writeNameFilter($patterns as xs:string?)
      as element(nameFilter)? {
   if (not($patterns)) then () else

   let $patternList := tokenize($patterns, '\s+')
   let $patternsPlus := $patternList[not(starts-with(., '~'))]   
   let $patternsMinus := for $n in $patternList[starts-with(., '~')] return substring($n, 2)
   return

   <nameFilter sourceValue="{$patterns}">{
      <filterPos>{
         for $p in $patternsPlus
         let $isRegex := contains(substring-after($p, '#'), 'r')         
         let $options :=        
            let $raw := concat('i', replace(substring-after($p, '#'), 'r', ''))            
            return
               if (contains($raw, 'c')) then replace($raw, '[ic]', '')
               else $raw
         let $patternRaw := replace($p, '#.*', '')
         let $patternExp := if ($isRegex) then $patternRaw else replace($patternRaw, '\*', '.*')
         let $pattern := concat('^', $patternExp, '$')
         return
            <filter pattern="{$pattern}" options="{$options}"/>
      }</filterPos>,
      <filterNeg>{
         for $p in $patternsMinus
         let $isRegex := contains(substring-after($p, '#'), 'r')         
         let $options := 
            let $raw := concat('i', replace(substring-after($p, '#'), 'r', ''))            
            return
               if (contains($raw, 'c')) then replace($raw, '[ic]', '')
               else $raw
         let $patternRaw := replace($p, '#.*', '')
         let $patternExp := if ($isRegex) then $patternRaw else replace($patternRaw, '\*', '.*')
         let $pattern := concat('^', $patternExp, '$')
         return
            <filter pattern="{$pattern}" options="{$options}"/>
      }</filterNeg>
   }</nameFilter>
};
:)
(:
(:~
 : Translates the string represenaiton of a name filter map into
 : a name filter map element. A name filter map associates values
 : with name filters. Given a name, the function "nameFilterMapValue"
 : returns the first value associated with a name filter which
 : the name matches.
 :
 : @param source the source text
 : @return the name filter map element
 :) 
declare function m:writeNameFilterMap($source as xs:string?)
        as element()? {
    if (not($source)) then () else
    
    let $items := tokenize($source, ';\s*')
    let $mapEntries :=    
        for $item in $items
        return
            if (not(contains($item, ':'))) then <entry value="{$item}"/>
            else
                let $value := replace($item, '\s+|\s*:.*', '')
                let $patterns := replace($item, '.*:\s*', '')
                let $filter := m:writeNameFilter($patterns)
                return
                    <entry value="{$value}">{$filter}</entry>
    let $defaultEntries := $mapEntries[not(*)]                    
    return
        <nameFilterMap>{
            $mapEntries except $defaultEntries,
            $defaultEntries[1]
        }</nameFilterMap>
};
:)
(:
(:~
 : Translates a name list or a sequence of / or // separeted name lists
 : into a name filter path.
 :)
declare function m:writeNameFilterPath($filterPath as xs:string)
      as element()* {
    <nameFilterPath>{
        m:writeNameFilterPathRC($filterPath)
    }</nameFilterPath>
};

(:~
 : Recursive helper function of 'writeNameFilterpath'.
 :)
declare function m:writeNameFilterPathRC($filterPath as xs:string)
      as element()* {
   if (not(contains($filterPath, '/'))) then m:writeNameFilter($filterPath)
   else
   
   let $step := substring-before($filterPath, '/')
   let $sep := replace($filterPath, '.*?(/+).*', '$1')
   let $next := replace($filterPath, '.*?/+(.*)', '$1')
   return (
      if (string($step)) then m:writeNameFilter($step) else (),
      <sep>{$sep}</sep>,
      if (string($next)) then m:writeNameFilterPathRC($next) else ()
   )
};
:)

