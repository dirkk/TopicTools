(:
 : -------------------------------------------------------------------------
 :
 : docs.mod.xq - Document me!
 :
 : -------------------------------------------------------------------------
 :)
 
(:~@interface
<interface>
   <operations>
      <operation name="dcat" func="getDcat" type="element()">
         <param name="dfd" type="dcat+" sep=";"/>           
      </operation>
      <operation name="docs" func="getDocs" type="element()+">
         <pgroup name="input" minMembers="1"/>
         <param name="doc" type="docURI*" sep="\s" pgroup="input"/>           
         <param name="docs" type="docDFD*" sep=";" pgroup="input"/>
         <param name="dcat" type="docCAT*" sep=";" pgroup="input"/>         
      </operation>
      <operation name="doctypes" func="getDoctypes" type="node()">
         <pgroup name="input" minMembers="1"/>
         <param name="doc" type="docURI*" sep="\s" pgroup="input"/>           
         <param name="docs" type="docDFD*" sep=";" pgroup="input"/>
         <param name="dcat" type="docCAT*" sep=";" pgroup="input"/>         
         <param name="attNames" type="xs:boolean" default="false"/>        
         <param name="elemNames" type="xs:boolean" default="false"/>         
      </operation>      
    </operations>
</interface>    
:)  

module namespace f="http://www.ttools.org/xquery-functions";
import module namespace tt="http://www.ttools.org/xquery-functions" at 
    "_request.mod.xq",
    "_reportAssistent.mod.xq",
    "_nameFilter.mod.xq";
    
declare namespace z="http://www.ttools.org/structure";

(:~
 : Document me!
 :
 : @param request the operation request
 : @return a report describing ...
 :) 
declare function f:getDcat($request as element())
        as element() {     
    let $dcats := tt:getParam($request, 'dfd')  
    return 
        if (count($dcats) eq 1) then $dcats else
        
            (: merge dcats :)
            let $hrefs := distinct-values($dcats//@href)
            let $count := count($hrefs)
            let $dirs := string-join(for $dcat in $dcats return $dcat/@dirs, ' ; ')
            let $files := string-join(for $dcat in $dcats return $dcat/@files, ' ; ')            
            let $subDirs := string-join(for $dcat in $dcats return $dcat/@subDirs, ' ; ')
            return            
                element {$dcats[1]/node-name(.)} {
                    attribute count {$count},
                    attribute dirs {$dirs},
                    attribute files {$files},                    
                    attribute subDirs {$subDirs},
                    for $href in $hrefs
                    order by lower-case($href)
                    return <doc href="{$href}"/>                    
                }
};

(:~
 : Document me!
 :
 : @param request the operation request
 : @return a report describing ...
 :) 
declare function f:getDocs($request as element())
        as element() {     
    let $docs := tt:getParams($request, ('doc', 'docs', 'dcat'))
    let $count := count($docs)
    return
        <z:documents count="{$count}">{
            for $doc in $docs return
                element {node-name($doc/*)} {
                    attribute z:documentURI {document-uri($doc)},
                    $doc/*/(@*, node())
                }                            
        }</z:documents>
};

(:~
 : Document me!
 :
 : @param request the operation request
 : @return a report describing ...
 :) 
declare function f:getDoctypes($request as element())
        as element() {
    let $docs := tt:getParams($request, ('doc', 'docs', 'dcat'))       
    let $withAttNames as xs:boolean := tt:getParams($request, 'attNames')
    let $withElemNames as xs:boolean := tt:getParams($request, 'elemNames')    
    let $doctypes :=
        for $doc in $docs
        let $doctype := $doc/*/concat(local-name(.), '@', namespace-uri(.))
        group by $doctype
        let $docRefs := 
            let $uris := $doc/document-uri(.) 
            return 
                for $uri in $uris order by lower-case($uri) return <doc href="{$uri}"/>
        let $attNames :=
            if (not($withAttNames)) then () else
                let $names := 
                    for $name in distinct-values($doc//@*/local-name()) order by lower-case($name) return $name
                return
                    <z:attNames count="{count($names)}">{$names}</z:attNames>
        let $elemNames :=
            if (not($withElemNames)) then () else
                let $names := 
                    for $name in distinct-values($doc//*/local-name()) order by lower-case($name) return $name
                return
                    <z:elemNames count="{count($names)}">{$names}</z:elemNames>
        return
            <z:doctype name="{$doctype}" count="{count($doc)}">{
                $attNames,
                $elemNames,
                $docRefs
            }</z:doctype>           
    return
        <z:doctypes countDocs="{count($docs)}" countDoctypes="{count($doctypes)}">{
            $doctypes
        }</z:doctypes>
}; 
