(:~ 
 : _stringTools.mod.xq - various tools for string processing
 :
 : @version 20140423-1 first version 
 : ===================================================================================
 :)

module namespace m="http://www.ttools.org/xquery-functions";

import module namespace i="http://www.ttools.org/xquery-functions" at
   "_constants.mod.xq";   

(:~
 : Splits a string into % separated items. Occurrences of %
 : preceded by a backslash are not treated as separator. Double
 : backslashes are returned as single backslash.
 :
 : @param item the string to be split
 : @return the fields of the string
 :)
declare function m:_getItemFields($item as xs:string) {
    for $item in i:_splitString($item, '%')
    let $item := replace($item, '\\\\,', '\\')
    let $item := replace($item, '\\([;,])', '$1')
    return
        $item
};

(:~
 : Splits a string into items separated by $sep. The separator is
 : expected to be a single character. Occurrences preceded by
 : a backslash are not treated as separator. Double backslashes 
 : are returned as single backslash.
 :
 : @param s the string to be split
 : @return the items
 :) 
declare function m:_splitString($s as xs:string?, $sep as xs:string)
        as xs:string* {
    m:_splitStringRC($s, $sep)        
};

(:~
 : Recursive helper function of _splitString.
 :
 : @param s the string to be split
 : @return the items
 :) 
declare function m:_splitStringRC($s as xs:string?, $sep as xs:string)
        as xs:string* {
    if (empty($s)) then () else
    
    (: the next item preceding a $sep or the string end :)
    let $item := replace($s, concat('^(.*?[^\\](\\\\)*)??', $sep, '.*'), '$1', 's')[. ne $s]
    return 
        if (empty($item)) then $s
        else    
            let $next := replace(substring($s, string-length($item) + 2), '^\s+', '')
            return (
                $item,
                if (empty($next)) then () else m:_splitStringRC($next, $sep)
            )            
};        

(:~
 : Edits a sequence of strings removing prefixes as specified. If
 : a $prefixTerminator is specified, any prefix not ending with this
 : string is edited before use, appending the terminator.
 :
 : @param strings the strings to be edited
 : @param prefixes the prefixes to be removed
 : @param prefixTerminator if specified, any prefix not ending with this
 :    string is edited before use by appending this string
 : @return the edited names
 :)
declare function m:removeStringPrefixes($strings as xs:string*, 
                                        $prefixes as xs:string*,
                                        $prefixTerminator as xs:string?)
        as xs:string* {
        
    (: prefix editing: add trailing dot, if not already present :)
    let $prefixes := 
        if (empty($prefixTerminator)) then $prefixes else
        for $p in $prefixes 
        return
            if (ends-with($p, $prefixTerminator)) then $p 
            else concat($p, $prefixTerminator)
            
    for $s in $strings
    let $matchingPrefixes := $prefixes[starts-with($s, .)]
    return
        if (empty($matchingPrefixes)) then $s
        else
            let $matchingPrefix :=
                if (count($matchingPrefixes) gt 1) then
                    let $maxLen := max(for $p in $matchingPrefixes return string-length($p))
                    return $matchingPrefixes[string-length(.) eq $maxLen][1]
                else $matchingPrefixes
        return
            substring-after($s, $matchingPrefix)
};


